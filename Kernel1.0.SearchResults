---- f_pos Matches (201 in 36 files) ----
Array.c (fs\proc):	unsigned long p = file->f_pos;
Array.c (fs\proc):	file->f_pos += read;
Array.c (fs\proc):	if (file->f_pos >= length) {
Array.c (fs\proc):	if (count + file->f_pos > length)
Array.c (fs\proc):		count = length - file->f_pos;
Array.c (fs\proc):	end = count + file->f_pos;
Array.c (fs\proc):	memcpy_tofs(buf, page + file->f_pos, count);
Array.c (fs\proc):	file->f_pos = end;
Base.c (fs\proc):	if (((unsigned) filp->f_pos) < NR_BASE_DIRENTRY) {
Base.c (fs\proc):		de = base_dir + filp->f_pos;
Base.c (fs\proc):		filp->f_pos++;
Block_dev.c (fs):	block = filp->f_pos >> blocksize_bits;
Block_dev.c (fs):	offset = filp->f_pos & (blocksize-1);
Block_dev.c (fs):		filp->f_pos += chars;
Block_dev.c (fs):	offset = filp->f_pos;
Block_dev.c (fs):			filp->f_pos += chars;
Dir.c (fs\ext):	if (filp->f_pos % 8 != 0)
Dir.c (fs\ext):	while (filp->f_pos < inode->i_size) {
Dir.c (fs\ext):		offset = filp->f_pos & 1023;
Dir.c (fs\ext):		bh = ext_bread(inode,(filp->f_pos)>>BLOCK_SIZE_BITS,0);
Dir.c (fs\ext):			filp->f_pos += 1024-offset;
Dir.c (fs\ext):		while (offset < 1024 && filp->f_pos < inode->i_size) {
Dir.c (fs\ext):			    (de->rec_len + filp->f_pos - 1) / 1024 > (filp->f_pos / 1024)) {
Dir.c (fs\ext):				filp->f_pos += 1024-offset;
Dir.c (fs\ext):				if (filp->f_pos > inode->i_size)
Dir.c (fs\ext):					filp->f_pos = inode->i_size;
Dir.c (fs\ext):			filp->f_pos += de->rec_len;
Dir.c (fs\ext2):	while (filp->f_pos < inode->i_size) {
Dir.c (fs\ext2):		offset = filp->f_pos & (sb->s_blocksize - 1);
Dir.c (fs\ext2):		blk = (filp->f_pos) >> EXT2_BLOCK_SIZE_BITS(sb);
Dir.c (fs\ext2):			filp->f_pos += sb->s_blocksize - offset;
Dir.c (fs\ext2):		while (offset < sb->s_blocksize && filp->f_pos < inode->i_size) {
Dir.c (fs\ext2):			filp->f_pos += de->rec_len;
Dir.c (fs\isofs):	offset = filp->f_pos & (bufsize - 1);
Dir.c (fs\isofs):	block = isofs_bmap(inode,filp->f_pos>>bufbits);
Dir.c (fs\isofs):	while (filp->f_pos < inode->i_size) {
Dir.c (fs\isofs):		       block, offset, filp->f_pos);
Dir.c (fs\isofs):			filp->f_pos = ((filp->f_pos & ~(ISOFS_BLOCK_SIZE - 1))
Dir.c (fs\isofs):			block = isofs_bmap(inode,(filp->f_pos)>>bufbits);
Dir.c (fs\isofs):		filp->f_pos += *((unsigned char *) de);
Dir.c (fs\isofs):			offset = filp->f_pos & (bufsize - 1);
Dir.c (fs\isofs):			block = isofs_bmap(inode,(filp->f_pos)>> bufbits);
Dir.c (fs\minix):	if (filp->f_pos & (info->s_dirsize - 1))
Dir.c (fs\minix):	while (filp->f_pos < inode->i_size) {
Dir.c (fs\minix):		offset = filp->f_pos & 1023;
Dir.c (fs\minix):		bh = minix_bread(inode,(filp->f_pos)>>BLOCK_SIZE_BITS,0);
Dir.c (fs\minix):			filp->f_pos += 1024-offset;
Dir.c (fs\minix):		while (offset < 1024 && filp->f_pos < inode->i_size) {
Dir.c (fs\minix):			filp->f_pos += info->s_dirsize;
Dir.c (fs\msdos):		if (filp->f_pos == 2) filp->f_pos = 0;
Dir.c (fs\msdos):		else if (filp->f_pos < 2) {
Dir.c (fs\msdos):				walk = filp->f_pos++ ? ".." : ".";
Dir.c (fs\msdos):	if (filp->f_pos & (sizeof(struct msdos_dir_entry)-1)) return -ENOENT;
Dir.c (fs\msdos):	while ((ino = msdos_get_entry(inode,&filp->f_pos,&bh,&de)) > -1) {
Dir.c (fs\nfs):			if (filp->f_pos == c_entry[i].cookie) {
Dir.c (fs\nfs):			filp->f_pos, NFS_READDIR_CACHE_SIZE, c_entry);
Dir.c (fs\nfs):		filp->f_pos = entry->cookie;
Dir.c (fs\sysv):	if ((unsigned long)(filp->f_pos) % SYSV_DIRSIZE)
Dir.c (fs\sysv):	while (filp->f_pos < inode->i_size) {
Dir.c (fs\sysv):		offset = filp->f_pos & sb->sv_block_size_1;
Dir.c (fs\sysv):		bh = sysv_file_bread(inode, filp->f_pos >> sb->sv_block_size_bits, 0, &bh_data);
Dir.c (fs\sysv):			filp->f_pos += sb->sv_block_size - offset;
Dir.c (fs\sysv):		while (offset < sb->sv_block_size && filp->f_pos < inode->i_size) {
Dir.c (fs\sysv):			filp->f_pos += SYSV_DIRSIZE;
Dir.c (fs\sysv):				                        inode->i_dev, inode->i_ino, filp->f_pos - SYSV_DIRSIZE, de->inode);
Dir.c (fs\xiafs):    while (filp->f_pos < inode->i_size) {
Dir.c (fs\xiafs):        offset = filp->f_pos & (XIAFS_ZSIZE(inode->i_sb) - 1);
Dir.c (fs\xiafs):	bh = xiafs_bread(inode, filp->f_pos >> XIAFS_ZSIZE_BITS(inode->i_sb),0);
Dir.c (fs\xiafs):	    filp->f_pos += XIAFS_ZSIZE(inode->i_sb)-offset;
Dir.c (fs\xiafs):	while (offset < XIAFS_ZSIZE(inode->i_sb) && filp->f_pos < inode->i_size) {
Dir.c (fs\xiafs):	    filp->f_pos += de->d_rec_len;
Exec.c (fs):	f->f_pos = 0;
Exec.c (fs):} else file.f_pos = (offset)		
Exec.c (fs):	file.f_pos = 0;
Exec.c (fs):	file.f_pos = 0;
Exec.c (fs):		file.f_pos = offset;
Fd.c (fs\proc):		fd = filp->f_pos;
Fd.c (fs\proc):		filp->f_pos++;
File.c (fs\ext):	offset = filp->f_pos;
File.c (fs\ext):			filp->f_pos += chars;
File.c (fs\ext):		pos = filp->f_pos;
File.c (fs\ext):	filp->f_pos = pos;
File.c (fs\ext2):	offset = filp->f_pos;
File.c (fs\ext2):			filp->f_pos += chars;
File.c (fs\ext2):		pos = filp->f_pos;
File.c (fs\ext2):	filp->f_pos = pos;
File.c (fs\isofs):	if (filp->f_pos > inode->i_size)
File.c (fs\isofs):		left = inode->i_size - filp->f_pos;
File.c (fs\isofs):	block = filp->f_pos >> ISOFS_BUFFER_BITS(inode);
File.c (fs\isofs):	offset = filp->f_pos & (ISOFS_BUFFER_SIZE(inode)-1);
File.c (fs\isofs):		  filp->f_pos += chars;
File.c (fs\minix):	offset = filp->f_pos;
File.c (fs\minix):			filp->f_pos += chars;
File.c (fs\minix):		pos = filp->f_pos;
File.c (fs\minix):	filp->f_pos = pos;
File.c (fs\msdos):	if (filp->f_pos >= inode->i_size || count <= 0) return 0;
File.c (fs\msdos):	while ((left = MIN(inode->i_size-filp->f_pos,count-(buf-start))) > 0){
File.c (fs\msdos):		if (!(sector = msdos_smap(inode,filp->f_pos >> SECTOR_BITS)))
File.c (fs\msdos):		offset = filp->f_pos & (SECTOR_SIZE-1);
File.c (fs\msdos):		filp->f_pos += (size = MIN(SECTOR_SIZE-offset,left));
File.c (fs\msdos):						filp->f_pos = inode->i_size;
File.c (fs\msdos):	if (filp->f_flags & O_APPEND) filp->f_pos = inode->i_size;
File.c (fs\msdos):		while (!(sector = msdos_smap(inode,filp->f_pos >> SECTOR_BITS)))
File.c (fs\msdos):		offset = filp->f_pos & (SECTOR_SIZE-1);
File.c (fs\msdos):			memcpy_fromfs(data+(filp->f_pos & (SECTOR_SIZE-1)),
File.c (fs\msdos):			to = (char *) data+(filp->f_pos & (SECTOR_SIZE-1));
File.c (fs\msdos):		filp->f_pos += written;
File.c (fs\msdos):		if (filp->f_pos > inode->i_size) {
File.c (fs\msdos):			inode->i_size = filp->f_pos;
File.c (fs\nfs):	pos = file->f_pos;
File.c (fs\nfs):	if (file->f_pos + count > inode->i_size)
File.c (fs\nfs):	file->f_pos = pos;
File.c (fs\nfs):	pos = file->f_pos;
File.c (fs\nfs):	file->f_pos = pos;
File.c (fs\sysv):	offset = filp->f_pos;
File.c (fs\sysv):			filp->f_pos += chars;
File.c (fs\sysv):		pos = filp->f_pos;
File.c (fs\sysv):	filp->f_pos = pos;
File.c (fs\xiafs):    offset = filp->f_pos;
File.c (fs\xiafs):	    filp->f_pos += chars;
File.c (fs\xiafs):        pos = filp->f_pos;
File.c (fs\xiafs):    filp->f_pos = pos;
Fs.h (include\linux):	off_t f_pos;
Hpfs_fs.c (fs\hpfs):	if (count > inode->i_size - filp->f_pos)
Hpfs_fs.c (fs\hpfs):		count = inode->i_size - filp->f_pos;
Hpfs_fs.c (fs\hpfs):		q = filp->f_pos >> 9;
Hpfs_fs.c (fs\hpfs):		r = filp->f_pos & 511;
Hpfs_fs.c (fs\hpfs):			if (count > inode->i_size - filp->f_pos - n + n0)
Hpfs_fs.c (fs\hpfs):				count = inode->i_size - filp->f_pos - n + n0;
Hpfs_fs.c (fs\hpfs):		filp->f_pos += n;
Hpfs_fs.c (fs\hpfs): * The actual sequence of f_pos values is
Hpfs_fs.c (fs\hpfs):	switch (filp->f_pos) {
Hpfs_fs.c (fs\hpfs):		filp->f_pos = -1;
Hpfs_fs.c (fs\hpfs):		filp->f_pos = 1;
Hpfs_fs.c (fs\hpfs):		de = map_pos_dirent(inode, &filp->f_pos, &qbh);
Hpfs_fs.c (fs\hpfs):			filp->f_pos = -2;
Ioctl.c (fs):			put_fs_long(filp->f_inode->i_size - filp->f_pos,
Locks.c (fs):	case 1 /*SEEK_CUR*/ : start = filp->f_pos; break;
Mem.c (drivers\char):	unsigned long p = file->f_pos;
Mem.c (drivers\char):	file->f_pos += read;
Mem.c (drivers\char):	unsigned long p = file->f_pos;
Mem.c (drivers\char):	file->f_pos += written;
Mem.c (drivers\char):	read2 = vread(buf + read1, (char *) file->f_pos, count - read1);
Mem.c (drivers\char):	file->f_pos += read2;
Mem.c (drivers\char):	unsigned int i = file->f_pos;
Mem.c (drivers\char):	file->f_pos = i;
Mem.c (drivers\char):	unsigned int i = file->f_pos;
Mem.c (drivers\char):	file->f_pos = i;
Mem.c (drivers\char):	return file->f_pos=0;
Mem.c (drivers\char):			file->f_pos = offset;
Mem.c (drivers\char):			return file->f_pos;
Mem.c (drivers\char):			file->f_pos += offset;
Mem.c (drivers\char):			return file->f_pos;
Mem.c (drivers\char):	if (file->f_pos < 0)
Mem.c (drivers\char):	return file->f_pos;
Mem.c (fs\proc):	addr = file->f_pos;
Mem.c (fs\proc):	file->f_pos = addr;
Mem.c (fs\proc):	addr = file->f_pos;
Mem.c (fs\proc):	file->f_pos = addr;
Mem.c (fs\proc):			file->f_pos = offset;
Mem.c (fs\proc):			return file->f_pos;
Mem.c (fs\proc):			file->f_pos += offset;
Mem.c (fs\proc):			return file->f_pos;
Namei.c (fs\isofs):	unsigned int block, i, f_pos, offset, inode_number;
Namei.c (fs\isofs):	f_pos = 0;
Namei.c (fs\isofs):	offset = f_pos & (bufsize - 1);
Namei.c (fs\isofs):	block = isofs_bmap(dir,f_pos >> bufbits);
Namei.c (fs\isofs):	while (f_pos < dir->i_size) {
Namei.c (fs\isofs):			f_pos = ((f_pos & ~(ISOFS_BLOCK_SIZE - 1))
Namei.c (fs\isofs):			block = isofs_bmap(dir,f_pos>>bufbits);
Namei.c (fs\isofs):		f_pos += *((unsigned char *) de);
Namei.c (fs\isofs):			offset = f_pos & (bufsize - 1);
Namei.c (fs\isofs):			block = isofs_bmap(dir,f_pos>>bufbits);
Net.c (fs\proc):	if (((unsigned) filp->f_pos) < NR_NET_DIRENTRY) {
Net.c (fs\proc):		de = net_dir + filp->f_pos;
Net.c (fs\proc):		filp->f_pos++;
Net.c (fs\proc):	if (file->f_pos >= length) {
Net.c (fs\proc):	if (count + file->f_pos > length)
Net.c (fs\proc):		count = length - file->f_pos;
Net.c (fs\proc):	end = count + file->f_pos;
Net.c (fs\proc):	memcpy_tofs(buf, page + file->f_pos, count);
Net.c (fs\proc):	file->f_pos = end;
Open.c (fs):	f->f_pos = 0;
Pipe.c (fs):	f[0]->f_pos = f[1]->f_pos = 0;
Read_write.c (fs):			tmp = file->f_pos + offset;
Read_write.c (fs):	file->f_pos = tmp;
Read_write.c (fs):	return file->f_pos;
Root.c (fs\proc):	nr = filp->f_pos;
Root.c (fs\proc):		filp->f_pos++;
Root.c (fs\proc):	filp->f_pos++;
Socket.c (net):  file->f_pos = 0;
St.c (drivers\scsi):      printk("st%d: File length %d bytes.\n", dev, filp->f_pos);
St.c (drivers\scsi):	    filp->f_pos += do_count - transfer;
St.c (drivers\scsi):      filp->f_pos += do_count;
St.c (drivers\scsi):      filp->f_pos += count;
St.c (drivers\scsi):	filp->f_pos += transfer;
Tpqic02.c (drivers\char):			MINOR(dev), buf, count, filp->f_pos, flags);
Tpqic02.c (drivers\char):			filp->f_pos += bytes_done;
Tpqic02.c (drivers\char):			MINOR(dev), buf, count, filp->f_pos, flags);
Tpqic02.c (drivers\char):			filp->f_pos += bytes_done;
