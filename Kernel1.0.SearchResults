---- i_rdev Matches (144 in 41 files) ----
Block_dev.c (fs):	dev = inode->i_rdev;
Block_dev.c (fs):	dev = inode->i_rdev;
Block_dev.c (fs):	return fsync_dev (inode->i_rdev);
Cdu31a.c (drivers\block):   dev = MINOR(inode->i_rdev) >> 6;
Cdu31a.c (drivers\block):      check_disk_change(inode->i_rdev);
Cdu31a.c (drivers\block):      sync_dev(inode->i_rdev);
Devices.c (fs):	i = MAJOR(inode->i_rdev);
Devices.c (fs):	i = MAJOR(inode->i_rdev);
Dir.c (fs\nfs):		inode->i_rdev = fattr->rdev;
Dir.c (fs\nfs):		inode->i_rdev = 0;
Floppy.c (drivers\block):		RO_IOCTLS(inode->i_rdev,param);
Floppy.c (drivers\block):	drive = MINOR(inode->i_rdev);
Floppy.c (drivers\block):			check_disk_change(inode->i_rdev);
Floppy.c (drivers\block):	drive = inode->i_rdev & 3;
Floppy.c (drivers\block):		if (old_dev != inode->i_rdev)
Floppy.c (drivers\block):	fd_device[drive] = inode->i_rdev;
Floppy.c (drivers\block):	if (old_dev && old_dev != inode->i_rdev)
Floppy.c (drivers\block):		check_disk_change(inode->i_rdev);
Floppy.c (drivers\block):	sync_dev(inode->i_rdev);
Floppy.c (drivers\block):	if (!fd_ref[inode->i_rdev & 3]--) {
Floppy.c (drivers\block):		fd_ref[inode->i_rdev & 3] = 0;
Fs.h (include\linux):	dev_t		i_rdev;
Hd.c (drivers\block):	dev = MINOR(inode->i_rdev) >> 6;
Hd.c (drivers\block):			put_fs_long(hd[MINOR(inode->i_rdev)].start_sect,
Hd.c (drivers\block):			put_fs_long(hd[MINOR(inode->i_rdev)].nr_sects,
Hd.c (drivers\block):			if(!inode->i_rdev) return -EINVAL;
Hd.c (drivers\block):			fsync_dev(inode->i_rdev);
Hd.c (drivers\block):			invalidate_buffers(inode->i_rdev);
Hd.c (drivers\block):			return revalidate_hddisk(inode->i_rdev, 1);
Hd.c (drivers\block):		RO_IOCTLS(inode->i_rdev,arg);
Hd.c (drivers\block):	target =  DEVICE_NR(MINOR(inode->i_rdev));
Hd.c (drivers\block):	sync_dev(inode->i_rdev);
Hd.c (drivers\block):	target =  DEVICE_NR(MINOR(inode->i_rdev));
Inode.c (fs):			MAJOR(inode->i_rdev), MINOR(inode->i_rdev),
Inode.c (fs\ext):		inode->i_rdev = raw_inode->i_zone[0];
Inode.c (fs\ext):		raw_inode->i_zone[0] = inode->i_rdev;
Inode.c (fs\ext2):		inode->i_rdev = raw_inode->i_block[0];
Inode.c (fs\ext2):		raw_inode->i_block[0] = inode->i_rdev;
Inode.c (fs\minix):		inode->i_rdev = raw_inode->i_zone[0];
Inode.c (fs\minix):		raw_inode->i_zone[0] = inode->i_rdev;
Inode.c (fs\sysv):		inode->i_rdev = raw_inode->i_a.i_rdev;
Inode.c (fs\sysv):		raw_inode->i_a.i_rdev = inode->i_rdev; /* write 2 or 3 bytes ?? */
Inode.c (fs\xiafs):        inode->i_rdev = raw_inode->i_zone[0];
Inode.c (fs\xiafs):        raw_inode->i_zone[0] = inode->i_rdev;
Lp.c (drivers\char):	unsigned int minor = MINOR(inode->i_rdev);
Lp.c (drivers\char):	unsigned int minor = MINOR(inode->i_rdev);
Lp.c (drivers\char):	if (LP_IRQ(MINOR(inode->i_rdev)))
Lp.c (drivers\char):	unsigned int minor = MINOR(inode->i_rdev);
Lp.c (drivers\char):	unsigned int minor = MINOR(inode->i_rdev);
Lp.c (drivers\char):	unsigned int minor = MINOR(inode->i_rdev);
Mcd.c (drivers\block):	sync_dev(inode->i_rdev);
Mcd.c (drivers\block):	invalidate_buffers(inode -> i_rdev);
Mem.c (drivers\char):	switch (MINOR(inode->i_rdev)) {
Mouse.c (drivers\char):	int minor = MINOR(inode->i_rdev);
Namei.c (fs\ext):		inode->i_rdev = rdev;
Namei.c (fs\ext2):		inode->i_rdev = rdev;
Namei.c (fs\minix):		inode->i_rdev = rdev;
Namei.c (fs\sysv):		inode->i_rdev = rdev;
Namei.c (fs\xiafs):        inode->i_rdev = rdev;
Rock.c (fs\isofs):	  inode->i_rdev = ((high << 8) | (low & 0xff)) & 0xffff;
Rock.c (fs\isofs):	inode->i_rdev = reloc->i_rdev;
Sbpcd.c (drivers\block):				MINOR(inode->i_rdev), cmd, arg));
Sbpcd.c (drivers\block):  i=MINOR(inode->i_rdev);
Sbpcd.c (drivers\block):  i = MINOR(ip->i_rdev);
Sbpcd.c (drivers\block):  i = MINOR(ip->i_rdev);
Sbpcd.c (drivers\block):  sync_dev(ip->i_rdev);                    /* nonsense if read only device? */
Sbpcd.c (drivers\block):  invalidate_buffers(ip->i_rdev);
Sd.c (drivers\scsi):	target =  DEVICE_NR(MINOR(inode->i_rdev));
Sd.c (drivers\scsi):	  check_disk_change(inode->i_rdev);
Sd.c (drivers\scsi):	sync_dev(inode->i_rdev);
Sd.c (drivers\scsi):	target =  DEVICE_NR(MINOR(inode->i_rdev));
Sd.c (drivers\scsi):	inode.i_rdev = full_dev;  /* This is all we really need here */
Sd_ioctl.c (drivers\scsi):	int dev = inode->i_rdev;
Sd_ioctl.c (drivers\scsi):			put_fs_long(sd[MINOR(inode->i_rdev)].start_sect,
Sd_ioctl.c (drivers\scsi):			put_fs_long(sd[MINOR(inode->i_rdev)].nr_sects,
Sd_ioctl.c (drivers\scsi):			if(!inode->i_rdev) return -EINVAL;
Sd_ioctl.c (drivers\scsi): 			fsync_dev(inode->i_rdev);
Sd_ioctl.c (drivers\scsi):			invalidate_buffers(inode->i_rdev);
Sg.c (drivers\scsi):  int dev = MINOR(inode->i_rdev);
Sg.c (drivers\scsi):  int dev=MINOR(inode->i_rdev);
Sg.c (drivers\scsi):  int dev=MINOR(inode->i_rdev);
Sg.c (drivers\scsi):  int dev=MINOR(inode->i_rdev);
Sg.c (drivers\scsi):  int dev=MINOR(inode->i_rdev);
Sock.c (net\inet):  minor = MINOR(inode->i_rdev);
Sock.c (net\unix):  minor = MINOR(inode->i_rdev);
Sock.c (net\unix):  minor = MINOR(inode->i_rdev);
Socket.c (net):  switch(MINOR(inode->i_rdev)) {
Soundcard.c (drivers\sound):  dev = inode->i_rdev;
Soundcard.c (drivers\sound):  dev = inode->i_rdev;
Soundcard.c (drivers\sound):  dev = inode->i_rdev;
Soundcard.c (drivers\sound):  dev = inode->i_rdev;
Soundcard.c (drivers\sound):  dev = inode->i_rdev;
Soundcard.c (drivers\sound):  dev = inode->i_rdev;
Sr.c (drivers\scsi):	sync_dev(inode->i_rdev);
Sr.c (drivers\scsi):	if(! --scsi_CDs[MINOR(inode->i_rdev)].device->access_count)
Sr.c (drivers\scsi):	inode.i_rdev = full_dev;  /* This is all we really need here */
Sr.c (drivers\scsi):	if(MINOR(inode->i_rdev) >= NR_SR || 
Sr.c (drivers\scsi):	   !scsi_CDs[MINOR(inode->i_rdev)].device) return -ENODEV;   /* No such device */
Sr.c (drivers\scsi):        check_disk_change(inode->i_rdev);
Sr.c (drivers\scsi):	if(!scsi_CDs[MINOR(inode->i_rdev)].device->access_count++)
Sr.c (drivers\scsi):	if(scsi_CDs[MINOR(inode->i_rdev)].needs_sector_size)
Sr.c (drivers\scsi):	  get_sectorsize(MINOR(inode->i_rdev));
Sr_ioctl.c (drivers\scsi):	int dev = inode->i_rdev;
St.c (drivers\scsi):  dev = MINOR(inode->i_rdev) & 127;
St.c (drivers\scsi):    dev = MINOR(inode->i_rdev) & 127;
St.c (drivers\scsi):    dev = MINOR(inode->i_rdev);
St.c (drivers\scsi):    dev = MINOR(inode->i_rdev) & 127;
St.c (drivers\scsi):    dev = MINOR(inode->i_rdev) & 127;
St.c (drivers\scsi):   int dev = MINOR(inode->i_rdev);
St.c (drivers\scsi):   int dev = MINOR(inode->i_rdev);
Stat.c (fs):	tmp.st_rdev = inode->i_rdev;
Stat.c (fs):	tmp.st_rdev = inode->i_rdev;
Super.c (fs):		dev = inode->i_rdev;
Super.c (fs):		dummy_inode.i_rdev = dev;
Super.c (fs):		dev = inode->i_rdev;
Swap.c (mm):			if (p->swap_device == inode->i_rdev)
Swap.c (mm):		p->swap_device = swap_inode->i_rdev;
Sysv_fs.h (include\linux):		dev_t i_rdev;
Tpqic02.c (drivers\char):	dev_t dev = inode->i_rdev;
Tpqic02.c (drivers\char):	dev_t dev = inode->i_rdev;
Tpqic02.c (drivers\char):	dev_t dev = inode->i_rdev;
Tpqic02.c (drivers\char):	dev_t dev = inode->i_rdev;
Tpqic02.c (drivers\char):	int dev_maj = MAJOR(inode->i_rdev);
Tty_io.c (drivers\char):		if (filp->f_inode && filp->f_inode->i_rdev == CONSOLE_DEV)
Tty_io.c (drivers\char):	if (file->f_inode->i_rdev != CONSOLE_DEV &&
Tty_io.c (drivers\char):	if (L_TOSTOP(tty) && file->f_inode->i_rdev != CONSOLE_DEV) {
Tty_io.c (drivers\char):	if ((inode->i_rdev != CONSOLE_DEV) && /* don't stop on /dev/console */
Tty_io.c (drivers\char):	is_console = (inode->i_rdev == CONSOLE_DEV);
Tty_io.c (drivers\char):	minor = MINOR(inode->i_rdev);
Tty_io.c (drivers\char):	major = MAJOR(inode->i_rdev);
Tty_io.c (drivers\char):		printk("Bad major #%d in tty_open\n", MAJOR(inode->i_rdev));
Xd.c (drivers\block):	int dev = DEVICE_NR(MINOR(inode->i_rdev));
Xd.c (drivers\block):	int dev = DEVICE_NR(MINOR(inode->i_rdev)),err;
Xd.c (drivers\block):							put_fs_long(xd[MINOR(inode->i_rdev)].start_sect,(long *) &geometry->start);
Xd.c (drivers\block):							put_fs_long(xd[MINOR(inode->i_rdev)].nr_sects,(long *) arg);
Xd.c (drivers\block):				if(!inode->i_rdev) return -EINVAL;
Xd.c (drivers\block):				fsync_dev(inode->i_rdev);
Xd.c (drivers\block):				invalidate_buffers(inode->i_rdev);
Xd.c (drivers\block):			case BLKRRPART:		return (xd_reread_partitions(inode->i_rdev));
Xd.c (drivers\block):			RO_IOCTLS(inode->i_rdev,arg);
Xd.c (drivers\block):	int dev = DEVICE_NR(MINOR(inode->i_rdev));
